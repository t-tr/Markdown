package com.ttr.markdown.md2html;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import org.commonmark.node.Node;
import org.commonmark.parser.Parser;
import org.commonmark.renderer.html.HtmlRenderer;

/**
 *
 * Converter class.
 *
 * @author t_tr 8 mars 2018 11:43:30
 *
 */
public class Converter {

	private final static String	INPUT_FILE_EXTENSION	= ".txt";
	private final static String	OUTPUT_FILE_EXTENSION	= ".html";
	private final static String	CONVERTER_VERSION		= "1.0.0";

	/**
	 * Convert method.
	 *
	 * @param args
	 */
	public static void main(final String[] args) {

		System.out.println("Start markdown to html conversion");

		if (null != args[0]) {

			// Parse input file and render into HTML
			final String rHtml = parseMarkdown(args[0]);

			// Add info
			final String rHtmlMod = AddCreationInfo(rHtml);

			// Create HTML file
			writeHtml(rHtmlMod, args[0].replaceAll(INPUT_FILE_EXTENSION, OUTPUT_FILE_EXTENSION));

		} else {
			System.out.println("parameter error");
			System.exit(-1);
		}

		System.out.println("Conversion successful");
		System.exit(0);

	}

	/**
	 *
	 * AddCreationInfo method.
	 *
	 * @param rHtml
	 * @return
	 */
	private static String AddCreationInfo(final String rHtml) {

		final DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
		final LocalDateTime now = LocalDateTime.now();

		final String result = rHtml + System.lineSeparator() + "<hr />" + System.lineSeparator()
				+ "Generated by MarkDown to HTML Converter " + CONVERTER_VERSION + " at " + dtf.format(now)
				+ " from the TtR company (c)";

		return result;
	}

	/**
	 *
	 * parseMarkdown method.
	 *
	 * @param mdFile
	 * @return HTML content
	 */
	private static String parseMarkdown(final String mdFile) {

		final Parser parser = Parser.builder().build();

		// Parse input file
		final Node document = parser.parse(readInputFile(mdFile));

		// Render document
		final HtmlRenderer renderer = HtmlRenderer.builder().build();
		final String rHtml = renderer.render(document);

		return rHtml;

	}

	/**
	 *
	 * readInputFile method.
	 *
	 * @param file
	 * 			@return Content of the file as a String object @throws
	 */
	private static String readInputFile(final String file) {

		String result = "";

		try {
			final FileInputStream is = new FileInputStream(file);
			final InputStreamReader isr = new InputStreamReader(is, "UTF-8");
			final BufferedReader br = new BufferedReader(isr);

			String sCurrentLine;

			while ((sCurrentLine = br.readLine()) != null) {

				// System.out.println(sCurrentLine);
				result += sCurrentLine + System.lineSeparator();
			}
			br.close();

		} catch (final IOException exc) {
			System.out.println("cannot process input file:" + exc.getLocalizedMessage());
			System.exit(-1);
		}

		return result;

	}

	/**
	 *
	 * writeHtml method.
	 *
	 * @param rHtml
	 * @param filename
	 */
	private static void writeHtml(final String rHtml, final String outFilename) {

		try {
			final Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outFilename), "UTF-8")); // windows-1252"
			try {
				out.write(rHtml);
			} finally {
				out.close();
			}

		} catch (final IOException exc) {
			System.out.println("cannot create output file");
			exc.printStackTrace();
			System.exit(-1);
		}

	}
}
